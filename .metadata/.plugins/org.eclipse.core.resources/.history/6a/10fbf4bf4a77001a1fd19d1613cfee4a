package com.telusko.demo.filter;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.web.filter.OncePerRequestFilter;

import com.example.demo.service.JwtUtil;
@Component
public class JwtFilter extends OncePerRequestFilter{

	
	@Autowired
	private UserDetailsService userDetailsService;
	@Autowired
	private JwtUtil jwtutil;
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		final String authorizationheeader=request.getHeader("Authorization");
		
		String username=null;
		String jwt=null;
		
		if(authorizationheeader!=null && authorizationheeader.startsWith("Bearer ")){
			jwt=authorizationheeader.substring(7);
			username=jwtutil.getUsernameFromToken(jwt);
		}
		if(username!=null && SecurityContextHolder.getContext().getAuthentication()==null ) {
			UserDetails userdetails=this.userDetailsService.loadUserByUsername(username);
		
			if (jwtutil.validateToken(jwt, userdetails)) {
				UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(
						userdetails, null, userdetails.getAuthorities());
				usernamePasswordAuthenticationToken
				.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
				// After setting the Authentication in the context, we specify
				// that the current user is authenticated. So it passes the
				// Spring Security Configurations successfully.
				SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
				}
				}
				filterChain.doFilter(request, response);
		
	}

}
